# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k_sERva8Wawq6pp-5AQIum-cGV_XtfTm
"""

from collections import defaultdict

# グラフの構築
def build_graph(edges):
    graph = defaultdict(list)
    for start, end, weight in edges:
        graph[start].append((end, weight))
    return graph

# 深さ優先探索で最長経路を見つける
def dfs(graph, node, start_node, visited, current_path, current_length, max_path_info):
    current_path.append(node)

    # 最大距離とそのパスを更新
    if current_length > max_path_info['max_length']:
        max_path_info['max_length'] = current_length
        max_path_info['max_path'] = list(current_path)

    for neighbor, weight in graph[node]:
        if neighbor not in visited or (neighbor == start_node and len(current_path) > 1):
            if neighbor != start_node:  # 始点に戻る場合は訪問済みにしない
                visited.add(neighbor)
            dfs(graph, neighbor, start_node, visited, current_path, current_length + weight, max_path_info)
            if neighbor != start_node:  # 探索を戻る際に訪問済みを解除
                visited.remove(neighbor)

    current_path.pop()

# メイン処理
def find_longest_path(edges):
    graph = build_graph(edges)
    max_path_info = {'max_length': 0, 'max_path': []}

    # すべてのノードを始点として最長経路を探す
    nodes = set(start for start, _, _ in edges) | set(end for _, end, _ in edges)
    for node in nodes:
        visited = set()
        visited.add(node)
        dfs(graph, node, node, visited, [], 0, max_path_info)

    return max_path_info['max_path']

# 入力データの受け取り
def input_edges():
    print("始点ID, 終点ID, 距離 (例: 1, 2, 8.54)")
    print("入力を終了するには空行を入力してください。")
    edges = []
    while True:
        line = input("入力: ").strip()
        if not line:
            break
        try:
            start, end, weight = map(str.strip, line.split(","))
            edges.append((int(start), int(end), float(weight)))
        except ValueError:
            print("フォーマットが正しくありません。もう一度入力してください。")
    return edges

# 実行
if __name__ == "__main__":
    print("最長片道きっぷの駅順")
    edges = input_edges()
    if not edges:
        print("データが入力されていません。プログラムを終了します。")
    else:
        longest_path = find_longest_path(edges)
        print("最長経路の駅順")
        print("\n".join(map(str, longest_path)))